'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElGamal = exports.DEFAULT_MODP_GROUP = exports.ELGAMALGROUPS = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Common = require('./Common.js');

var _Common2 = _interopRequireDefault(_Common);

var _SymCrypt = require('./SymCrypt.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;

var crypto = require('crypto');
var BigInteger = require('node-jsbn');
/**
* List of available groups from RFC
* @type {Object}
*/
var ELGAMALGROUPS = exports.ELGAMALGROUPS = {
  "modp5": {
    "p": "2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919",
    "g": "2",
    "q": "1205156213460516294276038011098783037428475274251229971327058470979054415841306114445046929130670807336613570738952006098251824478525291315971365353402504611531367372670536703348123007294680829887020513584624726600189364717085162921889329599071881596888429934762044470097788673059921772650773521873603874984881875042154463169647779984441228936206496905064565147296499973963182632029642323604865192473605840717232357219244260470063729922144429668263448160459816959"
  },
  "modp22": {
    "p": "124325339146889384540494091085456630009856882741872806181731279018491820800119460022367403769795008250021191767583423221479185609066059226301250167164084041279837566626881119772675984258163062926954046545485368458404445166682380071370274810671501916789361956272226105723317679562001235501455748016154805420913",
    "g": "115740200527109164239523414760926155534485715860090261532154107313946218459149402375178179458041461723723231563839316251515439564315555249353831328479173170684416728715378198172203100328308536292821245983596065287318698169565702979765910089654821728828592422299160041156491980943427556153020487552135890973413",
    "q": "1399252811935680595399801714158014275474696840019"
  },
  "modp23": {
    "p": "21847359589888208475506724917162265063571401985325370367631361781114029653025956815157605328190411141044160689815741319381196532979871500038979862309158738250945118554961626824152307536605872616502884288878062467052777605227846709781850614792748458838951342204812601838112937805371782600380106020522884406452823818824455683982042882928183431194593189171431066371138510252979648513553078762584596147427456837289623008879364829477705183636149304120998948654278133874026711188494311770883514889363351380064520413459602696141353949407971810071848354127868725934057811052285511726070951954828625761984797831079801857828431",
    "g": "21744646143243216057020228551156208752703942887207308868664445275548674736620508732925764357515199547303283870847514971207187185912917434889899462163342116463504651187567271577773370136574456671482796328194698430314464307239426297609039182878000113673163760381575629928593038563536234958563213385495445541911168414741250494418615704883548296728080545795859843320405072472266753448906714605637308642468422898558630812487636188819677130134963833040948411243908028200183454403067866539747291394732970142401544187137624428138444276721310399530477238861596789940953323090393313600101710523922727140772179016720953265564666",
    "q": "13491513086924420379699774282445616590110876328163828635542747312619"
  },
  "modp16": {
    "p": "1044388881413152506679602719846529545831269060992135009022588756444338172022322690710444046669809783930111585737890362691860127079270495454517218673016928427459146001866885779762982229321192368303346235204368051010309155674155697460347176946394076535157284994895284821633700921811716738972451834979455897010306333468590751358365138782250372269117968985194322444535687415522007151638638141456178420621277822674995027990278673458629544391736919766299005511505446177668154446234882665961680796576903199116089347634947187778906528008004756692571666922964122566174582776707332452371001272163776841229318324903125740713574141005124561965913888899753461735347970011693256316751660678950830027510255804846105583465055446615090444309583050775808509297040039680057435342253926566240898195863631588888936364129920059308455669454034010391478238784189888594672336242763795138176353222845524644040094258962433613354036104643881925238489224010194193088911666165584229424668165441688927790460608264864204237717002054744337988941974661214699689706521543006262604535890998125752275942608772174376107314217749233048217904944409836238235772306749874396760463376480215133461333478395682746608242585133953883882226786118030184028136755970045385534758453247",
    "g": "2",
    "q": "522194440706576253339801359923264772915634530496067504511294378222169086011161345355222023334904891965055792868945181345930063539635247727258609336508464213729573000933442889881491114660596184151673117602184025505154577837077848730173588473197038267578642497447642410816850460905858369486225917489727948505153166734295375679182569391125186134558984492597161222267843707761003575819319070728089210310638911337497513995139336729314772195868459883149502755752723088834077223117441332980840398288451599558044673817473593889453264004002378346285833461482061283087291388353666226185500636081888420614659162451562870356787070502562280982956944449876730867673985005846628158375830339475415013755127902423052791732527723307545222154791525387904254648520019840028717671126963283120449097931815794444468182064960029654227834727017005195739119392094944297336168121381897569088176611422762322020047129481216806677018052321940962619244612005097096544455833082792114712334082720844463895230304132432102118858501027372168994470987330607349844853260771503131302267945499062876137971304386087188053657108874616524108952472204918119117886153374937198380231688240107566730666739197841373304121292566976941941113393059015092014068377985022692767379226623"
  },
  "modp24": {
    "p": "17125458317614137930196041979257577826408832324037508573393292981642667139747621778802438775238728592968344613589379932348475613503476932163166973813218698343816463289144185362912602522540494983090531497232965829536524507269848825658311420299335922295709743267508322525966773950394919257576842038771632742044142471053509850123605883815857162666917775193496157372656195558305727009891276006514000409365877218171388319923896309377791762590614311849642961380224851940460421710449368927252974870395873936387909672274883295377481008150475878590270591798350563488168080923804611822387520198054002990623911454389104774092183",
    "g": "8041367327046189302693984665026706374844608289874374425728797669509435881459140662650215832833471328470334064628508692231999401840332046192569287351991689963279656892562484773278584208040987631569628520464069532361274047374444344996651832979378318849943741662110395995778429270819222431610927356005913836932462099770076239554042855287138026806960470277326229482818003962004453764400995790974042663675692120758726145869061236443893509136147942414445551848162391468541444355707785697825741856849161233887307017428371823608125699892904960841221593344499088996021883972185241854777608212592397013510086894908468466292313",
    "q": "63762351364972653564641699529205510489263266834182771617563631363277932854227"
  },
  "modp15": {
    "p": "5809605995369958062791915965639201402176612226902900533702900882779736177890990861472094774477339581147373410185646378328043729800750470098210924487866935059164371588168047540943981644516632755067501626434556398193186628990071248660819361205119793693985433297036118232914410171876807536457391277857011849897410207519105333355801121109356897459426271845471397952675959440793493071628394122780510124618488232602464649876850458861245784240929258426287699705312584509625419513463605155428017165714465363094021609290561084025893662561222573202082865797821865270991145082200656978177192827024538990239969175546190770645685893438011714430426409338676314743571154537142031573004276428701433036381801705308659830751190352946025482059931306571004727362479688415574702596946457770284148435989129632853918392117997472632693078113129886487399347796982772784615865232621289656944284216824611318709764535152507354116344703769998514148343807",
    "g": "2",
    "q": "2904802997684979031395957982819600701088306113451450266851450441389868088945495430736047387238669790573686705092823189164021864900375235049105462243933467529582185794084023770471990822258316377533750813217278199096593314495035624330409680602559896846992716648518059116457205085938403768228695638928505924948705103759552666677900560554678448729713135922735698976337979720396746535814197061390255062309244116301232324938425229430622892120464629213143849852656292254812709756731802577714008582857232681547010804645280542012946831280611286601041432898910932635495572541100328489088596413512269495119984587773095385322842946719005857215213204669338157371785577268571015786502138214350716518190900852654329915375595176473012741029965653285502363681239844207787351298473228885142074217994564816426959196058998736316346539056564943243699673898491386392307932616310644828472142108412305659354882267576253677058172351884999257074171903"
  },
  "modp14": {
    "p": "32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559",
    "g": "2",
    "q": "16158503035655503650169456963211914124408970620570119556421004875700370853317177111309844708681784673558950868954852095877302936604597514426879493092811076606087706257450887260135117898039118124442123094738793820552964323049705861622713311261096615270459518840262117759562839857935058500529027938825519430923640128988027451784866280763083540669680899770668238279580184158948364536589192294840319835950488601097084323612935515705668214659768096735818266604858538724113994294282684604322648318038625134477752964181375560587048486499034205277179792433291645821068109115539495499724326234131208486017955926253522680545279"
  },
  "modp18": {
    "p": "1090748135619415929450294929359784500348155124953172211774101106966150168922785639028532473848836817769712164169076432969224698752674677662739994265785437233596157045970922338040698100507861033047312331823982435279475700199860971612732540528796554502867919746776983759391475987142521315878719577519148811830879919426939958487087540965716419167467499326156226529675209172277001377591248147563782880558861083327174154014975134893125116015776318890295960698011614157721282527539468816519319333337503114777192360412281721018955834377615480468479252748867320362385355596601795122806756217713579819870634321561907813255153703950795271232652404894983869492174481652303803498881366210508647263668376514131031102336837488999775744046733651827239395353540348414872854639719294694323450186884189822544540647226987292160693184734654941906936646576130260972193280317171696418971553954161446191759093719524951116705577362073481319296041201283516154269044389257727700289684119460283480452306204130024913879981135908026983868205969318167819680850998649694416907952712904962404937775789698917207356355227455066183815847669135530549755439819480321732925869069136146085326382334628745456398071603058051634209386708703306545903199608523824513729625136659128221100967735450519952404248198262813831097374261650380017277916975324134846574681307337017380830353680623216336949471306191686438249305686413380231046096450953594089375540285037292470929395114028305547452584962074309438151825437902976012891749355198678420603722034900311364893046495761404333938686140037848030916292543273684533640032637639100774502371542479302473698388692892420946478947733800387782741417786484770190108867879778991633218628640533982619322466154883011452291890252336487236086654396093853898628805813177559162076363154436494477507871294119841637867701722166609831201845484078070518041336869808398454625586921201308185638888082699408686536045192649569198110353659943111802300636106509865023943661829436426563007917282050894429388841748885398290707743052973605359277515749619730823773215894755121761467887865327707115573804264519206349215850195195364813387526811742474131549802130246506341207020335797706780705406945275438806265978516209706795702579244075380490231741030862614968783306207869687868108423639971983209077624758080499988275591392787267627182442892809646874228263172435642368588260139161962836121481966092745325488641054238839295138992979335446110090325230955276870524611359124918392740353154294858383359",
    "g": "2",
    "q": "545374067809707964725147464679892250174077562476586105887050553483075084461392819514266236924418408884856082084538216484612349376337338831369997132892718616798078522985461169020349050253930516523656165911991217639737850099930485806366270264398277251433959873388491879695737993571260657939359788759574405915439959713469979243543770482858209583733749663078113264837604586138500688795624073781891440279430541663587077007487567446562558007888159445147980349005807078860641263769734408259659666668751557388596180206140860509477917188807740234239626374433660181192677798300897561403378108856789909935317160780953906627576851975397635616326202447491934746087240826151901749440683105254323631834188257065515551168418744499887872023366825913619697676770174207436427319859647347161725093442094911272270323613493646080346592367327470953468323288065130486096640158585848209485776977080723095879546859762475558352788681036740659648020600641758077134522194628863850144842059730141740226153102065012456939990567954013491934102984659083909840425499324847208453976356452481202468887894849458603678177613727533091907923834567765274877719909740160866462934534568073042663191167314372728199035801529025817104693354351653272951599804261912256864812568329564110550483867725259976202124099131406915548687130825190008638958487662067423287340653668508690415176840311608168474735653095843219124652843206690115523048225476797044687770142518646235464697557014152773726292481037154719075912718951488006445874677599339210301861017450155682446523247880702166969343070018924015458146271636842266820016318819550387251185771239651236849194346446210473239473866900193891370708893242385095054433939889495816609314320266991309661233077441505726145945126168243618043327198046926949314402906588779581038181577218247238753935647059920818933850861083304915600922742039035259020668434904199227312793460600654092819444041349704343268022596324784599055176829971555901150318053254932511971830914718213281503958641025447214694420874442699145353871526486802679638757874809865411886607947377560880733943932663853557786902132259603174607925097597682406693763405871237065774901065123253170603510167898853390352703472637719403132989258104853397851289622037690245115870515431307484391653103934843934054211819985991604538812379040249994137795696393633813591221446404823437114131586217821184294130069580981418060740983046372662744320527119419647569496489667723055045162615477638435262305679562459196370176577147429191679"
  },
  "modp17": {
    "p": "33751521821438561184518523159967412330064897805741846548173890474429429901326672445203235101919165483964194359460994881062089387893762814044257438204432573941083014827006090258925875161018096327732335800595831915976014208822304007327848132734933297885803213675261564962603340457220776826322500058091310967253976619973988033663666385188155212656268079501726223369693427999804134467810120772356498596945532366527400517575471969335854905274504119509592366013711954148258884879224599915203456315881034776553083676995718335598586395591169999570824515035017543533352697525287753332500527176569576894926734950469293596134095086603716860086302051544539652689091299099784588919052383463057789440565460681441902442399956419060521629604697347879024654313800186078316526964529288062740879011035175920059192178561473199006205896719435014765345518490882366607110905303449152556221163232127426440691921134648766635695850239231304591744215610985029636895406718880766308249227315984267542266259489684372223916445411015900506239419267909716320331208988978180868987431623710347617992356201449023892203230133009421463914291201346063125219636964261683591541014344239275340735690997732222069758773963390876360546515755280517042160525487302898122311669799679447530453600399342697032714458549591285939453949034981248114322322367238645042515984447890788917823576330019151696568654314153058547592091366014550143819685170068343700104677609041166369760080933413605498962382077778845599834907475953430787446201384567328530675275792962354883770806900827183685718353469574731680520621944540947734619035177180057973022652571032196598229259194875709994709721793154158686515748507274224181316948797104601068212015232921691482496346854413698719750190601102705274481050543239815130686073601076304512284549218459846046082253596762433827419060089029417044871218316020923109988915707117567",
    "g": "2",
    "q": "16875760910719280592259261579983706165032448902870923274086945237214714950663336222601617550959582741982097179730497440531044693946881407022128719102216286970541507413503045129462937580509048163866167900297915957988007104411152003663924066367466648942901606837630782481301670228610388413161250029045655483626988309986994016831833192594077606328134039750863111684846713999902067233905060386178249298472766183263700258787735984667927452637252059754796183006855977074129442439612299957601728157940517388276541838497859167799293197795584999785412257517508771766676348762643876666250263588284788447463367475234646798067047543301858430043151025772269826344545649549892294459526191731528894720282730340720951221199978209530260814802348673939512327156900093039158263482264644031370439505517587960029596089280736599503102948359717507382672759245441183303555452651724576278110581616063713220345960567324383317847925119615652295872107805492514818447703359440383154124613657992133771133129744842186111958222705507950253119709633954858160165604494489090434493715811855173808996178100724511946101615066504710731957145600673031562609818482130841795770507172119637670367845498866111034879386981695438180273257877640258521080262743651449061155834899839723765226800199671348516357229274795642969726974517490624057161161183619322521257992223945394458911788165009575848284327157076529273796045683007275071909842585034171850052338804520583184880040466706802749481191038889422799917453737976715393723100692283664265337637896481177441885403450413591842859176734787365840260310972270473867309517588590028986511326285516098299114629597437854997354860896577079343257874253637112090658474398552300534106007616460845741248173427206849359875095300551352637240525271619907565343036800538152256142274609229923023041126798381216913709530044514708522435609158010461554994457853558783"
  }
};

var ZERO = new BigInteger('0');
var ONE = new BigInteger('1');
var TWO = new BigInteger('2');

// ------------- El gamal generators ------------------
//export const DEFAULT_MODP_GROUP = 'modp14';   // --- 2048 ---
var DEFAULT_MODP_GROUP = exports.DEFAULT_MODP_GROUP = 'modp23'; // --- 2048 ---
//export const DEFAULT_MODP_GROUP = 'modp5';   //  for testing
//export const DEFAULT_MODP_GROUP = 'modp16';   // --- 4096 ---


/**
* convertion from String to Uint8Array
* @param  {[String]} string [the string to convert]
* @return {[Uint8Array]}        [the array]
*/
function stringToUint8Array(string) {
  //var string = btoa(unescape(encodeURIComponent(string)));
  var charList = string.split('');
  var uintArray = [];

  for (var i = 0; i < charList.length; i++) {
    uintArray.push(charList[i].charCodeAt(0));
  }
  //let a = new Uint8Array(uintArray);
  //console.log(String.fromCharCode.apply(null, a));
  return new Uint8Array(uintArray);
}

function stringToArrayBuffer(string) {
  var buf = new ArrayBuffer(string.length * 2); // 2 bytes for each char
  var bufView = new Uint16Array(buf);
  for (var i = 0, strLen = string.length; i < strLen; i++) {
    bufView[i] = string.charCodeAt(i);
  }
  return buf;
}

function toArrayBuffer(buffer) {
  var ab = new ArrayBuffer(buffer.length);
  var view = new Uint8Array(ab);
  for (var i = 0; i < buffer.length; ++i) {
    view[i] = buffer[i];
  }
  return ab;
}

function ab2str(buf) {
  return String.fromCharCode.apply(null, new Uint8Array(buf));
}

function toHexString(byteArray) {
  return Array.from(byteArray, function (byte) {
    return ('0' + (byte & 0xFF).toString(16)).slice(-2);
  }).join('');
}

function toBuffer16(ab) {
  return new Buffer(new Uint16Array(ab));
}
function toBuffer8(ab) {
  return new Buffer(new Uint8Array(ab));
}
/**
*******************************************************************************
**** El Gamal encryption ******************************************************
*******************************************************************************
*/

var ElGamal = exports.ElGamal = function (_CryptoObject) {
  _inherits(ElGamal, _CryptoObject);

  /**
  * New object elgamal
  * @param  {[group]} string [the group for elgamal]
  */
  function ElGamal(givenGroup) {
    _classCallCheck(this, ElGamal);

    var _this = _possibleConstructorReturn(this, (ElGamal.__proto__ || Object.getPrototypeOf(ElGamal)).call(this));

    _this.P = undefined;
    _this.Q = undefined;
    _this.G = undefined;

    _this.privateKey = undefined;
    _this.publicKey = undefined;
    _this.quorumSecretKey = ZERO;

    _this.encryptedPrivateKeyStruct = undefined;

    _this.generateconstants(givenGroup);

    return _this;
  }

  _createClass(ElGamal, [{
    key: 'generateconstants',
    value: function generateconstants(givenGroup) {
      this.group = givenGroup ? givenGroup : DEFAULT_MODP_GROUP;
      var g = ELGAMALGROUPS[this.group];
      if (!g) return this.err("group " + this.group + " not defined !");
      this.P = new BigInteger(g.p);
      this.Q = new BigInteger(g.q);
      this.G = new BigInteger(g.g);
    }

    /**
    * Return the bit length of the group
    * @return {[int]} [the length in bits]
    */

  }, {
    key: 'importKeys',
    value: function importKeys(encryptedPrivateKeyStruct, publicKeyString) {

      // --------- Import the public Key if exist
      if (publicKeyString) {
        this.publicKeyString = publicKeyString;
      }

      if (encryptedPrivateKeyStruct) {
        this.encryptedPrivateKeyStruct = encryptedPrivateKeyStruct;
      }
      return true;
    }

    /**
    * Return a random BigInteger beetween 0 and P
    * @return {[BigInteger]} [random number]
    */

  }, {
    key: 'generateKeys',
    value: function generateKeys() {
      var _this2 = this;

      return new _Promise(function (resolve, reject) {
        // ------------ generate the private Key ---------------------
        _this2.privateKey = _this2.randomInP;
        // ------------ Compute the public key -----------------------
        _this2.publicKey = _this2.G.modPow(_this2.privateKey, _this2.P);
        resolve(true);
      });
    }
  }, {
    key: 'genSessionKey',
    value: function genSessionKey() {
      var _this3 = this;

      return new _Promise(function (resolve, reject) {
        // ------------ generate the session Key ---------------------
        var sessionKey = _this3.randomInP;
        resolve(sessionKey.toString());
      });
    }
  }, {
    key: 'cryptPrivateKeyWithPassphrase',
    value: function cryptPrivateKeyWithPassphrase(passKey) {
      var _this4 = this;

      var sym = new _SymCrypt.SymCrypt();
      return sym.key.wrapKeyFromPassphrase(passKey).then(function () {
        return sym.cipher(_this4.privateKey.toString(), "base64");
      }).then(function (encryptedPrivateKeyString) {
        _this4.encryptedPrivateKeyStruct = {
          "key": encryptedPrivateKeyString,
          "salt": sym.key.content.salt,
          "keylen": sym.key.content.keylen,
          "iteration": sym.key.content.iteration,
          "hash": sym.key.content.hash
        };
        return _this4.encryptedPrivateKeyStruct;
      });
    }
  }, {
    key: 'releasePrivateKey',
    value: function releasePrivateKey(passKey) {
      var _this5 = this;

      if (!this.encryptedPrivateKeyStruct) return this.err("encrypted private key not set");
      var sym = new _SymCrypt.SymCrypt();
      return sym.key.wrapKeyFromPassphrase(passKey, this.encryptedPrivateKeyStruct.keylen, this.encryptedPrivateKeyStruct.salt, this.encryptedPrivateKeyStruct.iteration, this.encryptedPrivateKeyStruct.hash).then(function () {
        return sym.decipher(_this5.encryptedPrivateKeyStruct.key, "base64", "string");
      }).then(function (privateKey) {
        _this5.privateKey = new BigInteger(privateKey);
      });
    }
  }, {
    key: 'crypt',
    value: function crypt(m) {
      var _this6 = this;

      var mbig = undefined;
      if (typeof m === "string") mbig = new BigInteger(m);
      if (m instanceof BigInteger) mbig = m;

      if (!mbig) return this.err("Unable to crypt, unknown format");
      if (!this.publicKey) return this.err("Unable to crypt, no public key");

      return new _Promise(function (resolve, reject) {
        // ------------ generate the session Key ---------------------
        var r = _this6.randomInP;
        //let r = new BigInteger("123");    // DEBUG

        var alpha = _this6.G.modPow(r, _this6.P);
        var beta = mbig.multiply(_this6.publicKey.modPow(r, _this6.P));
        //console.log( "crypt ", { alpha : alpha.toString() , beta : beta.toString(), group : this.group } );
        //console.log( "crypt pubkey="+this.publicKey.toString() );
        resolve({ alpha: alpha.toString(), beta: beta.toString(), group: _this6.group });
      });
    }
  }, {
    key: 'decrypt',
    value: function decrypt(crypted, format) {
      var _this7 = this;

      if (!this.privateKey) return this.err("Unable to decrypt, privateKey not set.");

      // --------- must decrypt a good structure ---------
      if (!crypted instanceof Object) return this.err("Not a good encrypted structure");
      if (typeof crypted.alpha !== "string") return this.err("Not a good encrypted structure");
      if (typeof crypted.beta !== "string") return this.err("Not a good encrypted structure");
      if (typeof crypted.group !== "string") return this.err("Not a good encrypted structure");
      if (crypted.group != this.group) return this.err("group mismatch beetween crypted data and privateKey");

      return new _Promise(function (resolve, reject) {
        var a = new BigInteger(crypted.alpha);
        var b = new BigInteger(crypted.beta);
        var xx = a.modPow(_this7.privateKey, _this7.P);

        var m = b.multiply(xx.modInverse(_this7.P)).mod(_this7.P);

        switch (format) {
          case "BigInteger":
            return resolve(m);
          case "String":
          default:
            return resolve(m.toString());
        }
      });
    }
  }, {
    key: 'combinedCrypt',
    value: function combinedCrypt(secretText) {
      var _this8 = this;

      var publicKeyString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

      var sym = new _SymCrypt.SymCrypt();
      var sessionKey = undefined;
      var sessionKeyEncrypted = undefined;

      // --- import the public Key if ( exist )---
      if (publicKeyString) this.publicKeyString = publicKeyString;

      return this.genSessionKey().then(function (skey) {
        sessionKey = skey;
        return sym.key.wrapKeyFromPassphrase(skey);
      }).then(function () {
        return _this8.crypt(sessionKey);
      }).then(function (c) {
        sessionKeyEncrypted = c;
        sessionKey = undefined;
        return sym.cipher(secretText, "base64");
      }).then(function (k) {
        var c = sym.key.params;
        c.datasCrypt = k;
        c.dataKey = sessionKeyEncrypted;
        return c;
      });
    }
  }, {
    key: 'combinedDecrypt',
    value: function combinedDecrypt(datasCrypt, dataKey, keylen, salt, iteration, hash) {
      var sym = new _SymCrypt.SymCrypt();

      return this.decrypt(dataKey).then(function (sessionKeyString) {
        return sym.key.wrapKeyFromPassphrase(sessionKeyString, keylen, salt, iteration, hash);
      }).then(function () {
        return sym.decipher(datasCrypt, "base64", "string");
      });
    }
  }, {
    key: 'reinitPublicKey',
    value: function reinitPublicKey() {
      this.publicKey = ONE;
    }
  }, {
    key: 'quorumInitPolynome',
    value: function quorumInitPolynome(max, quorum) {
      if (!Number.isInteger(max)) return this.err("max in quorumInitPolynome must be int");
      if (!Number.isInteger(quorum)) return this.err("quorum in quorumInitPolynome must be int");
      if (quorum > max) return this.err("quorum must be < max in quorumInitPolynome ");

      // --------- Initialisation of all "global" variables -----------------
      this.quorumPublicKeyPart = null;
      this.publicKey = ONE;
      this.quorumSecretToadmin = [];
      this.quorum = quorum;
      this.quorumMax = max;
      this.quorumSecretKey = ZERO;
      if (this.quorumMax < this.quorum) log.this.err("quorum more than max !");

      var a = [];
      var size = Math.floor(this.Q.bitLength() / 8) + 1;
      for (var i = 0; i < this.quorum; i++) {
        var buf = crypto.randomBytes(size);
        a[i] = new BigInteger(buf).mod(this.Q.divide(TWO));

        //console.log("polynome a("+i+")="+a[i].toString());
      }
      this.quorumPublicKeyPart = this.G.modPow(a[0], this.P);

      for (var j = 1; j <= this.quorumMax; j++) {
        var pp = ZERO;
        var bigJ = new BigInteger("" + j);
        for (var x = 0; x < this.quorum; x++) {
          pp = pp.add(a[x].multiply(bigJ.pow(x))).mod(this.P);
        }
        this.quorumSecretToadmin[j] = pp;
        //console.log("secret for admin "+j+"="+pp.toString());
      }
    }
  }, {
    key: 'quorumGetAdminSecretShareString',
    value: function quorumGetAdminSecretShareString(rank) {
      if (!Number.isInteger(rank)) return this.err("ranq in quorumGetAdminSecretShareString must be int");
      if (!this.quorumSecretToadmin) this.err("Quorum not initialize");
      if (!rank > this.quorumMax) this.err("rank larger than number of admins");
      return this.quorumSecretToadmin[rank].toString();
    }
  }, {
    key: 'quorumAddToPublicKey',
    value: function quorumAddToPublicKey(pub) {
      if (typeof pub !== "string") return this.err("quorumAddToPublicKey params is not a string");
      this.publicKey = this.publicKey.multiply(new BigInteger(pub)).mod(this.P);
    }
  }, {
    key: 'quorumAddToMySecret',
    value: function quorumAddToMySecret(sij) {
      if (typeof sij !== "string") return this.err("sij not a string in quorumAddToMySecret");
      this.quorumSecretKey = this.quorumSecretKey.add(new BigInteger(sij)).mod(this.Q);
    }
  }, {
    key: 'quorumSurcryptAlpha',
    value: function quorumSurcryptAlpha(crypted) {
      // --------- must decrypt a good structure ---------
      if (!crypted instanceof Object) return this.err("Not a good encrypted structure");
      if (typeof crypted.alpha !== "string") return this.err("Not a good encrypted structure");
      if (typeof crypted.beta !== "string") return this.err("Not a good encrypted structure");
      if (typeof crypted.group !== "string") return this.err("Not a good encrypted structure");
      if (crypted.group != this.group) return this.err("group mismatch beetween crypted data and privateKey");

      var alpha = new BigInteger(crypted.alpha);
      var c = alpha.modPow(this.quorumSecretKey, this.P);
      //console.log("surcrypt alpha with secret key  "+this.quorumSecretKey.toString()+" = "+c.toString());
      return c.toString();
    }
  }, {
    key: 'quorumDecrypt',
    value: function quorumDecrypt(crypted, admins) {
      var _this9 = this;

      // --------- must decrypt a good structure ---------
      if (!crypted instanceof Object) return this.err("Not a good encrypted structure");
      if (typeof crypted.alpha !== "string") return this.err("Not a good encrypted structure");
      if (typeof crypted.beta !== "string") return this.err("Not a good encrypted structure");
      if (typeof crypted.group !== "string") return this.err("Not a good encrypted structure");
      if (crypted.group != this.group) return this.err("group mismatch beetween crypted data and privateKey");

      if (!admins instanceof Object) return this.err("admins not a elgamal crypt structure");

      return new _Promise(function (resolve, reject) {
        var beta = new BigInteger(crypted.beta);
        // console.log("decrypt beta   "+beta.toString());
        var prod = ONE;
        for (var rank in admins) {
          var bigL = _this9.lagrange(rank, admins);
          var c = new BigInteger(admins[rank]);
          var xx = c.modPow(bigL, _this9.P);
          //console.log(rank+" - decrypt beta ("+beta.toString()+") += "+xx.modInverse(this.P).toString());
          //prod = prod.multiply(xx);
          beta = beta.multiply(xx.modInverse(_this9.P)).mod(_this9.P);
        }
        //let f = new BigInteger ( crypted.beta ).divide(prod);
        //console.log("f = "+f.toString());

        resolve(beta.toString());
      });
    }
  }, {
    key: 'lagrange',
    value: function lagrange(index, admins) {
      var res = ONE;
      var bigIndex = new BigInteger("" + index);
      for (var rank in admins) {
        if (rank == index) continue;
        var bigI = new BigInteger("" + rank);
        var s = bigI.subtract(bigIndex);
        if (s.signum() == -1) s = this.Q.add(s);
        var v = s.modInverse(this.Q);
        //  console.log("s("+index+"/"+rank+")=" + v.toString());

        //  let b = bigI.subtract ( bigIndex ).mod( this.Q ).modInverse( this.Q );
        //  res = res.multiply ( bigI.multiply(  b  ) ).mod( this.Q );
        res = res.multiply(bigI.multiply(s.modInverse(this.Q))).mod(this.Q);
      }
      //console.log("lagrange r("+index+")=",res.toString());

      return res;
    }
  }, {
    key: 'bitLength',
    get: function get() {
      return this.P ? this.P.bitLength() : 0;
    }
  }, {
    key: 'byteLength',
    get: function get() {
      return Math.floor(this.bitLength / 8);
    }

    /**
    * Extract the public Key as a String
    * @return {[String]} [encoded Public Key]
    */

  }, {
    key: 'publicKeyString',
    get: function get() {
      if (!this.publicKey) return this.err("public key not set");
      return '{' + this.group + '}' + this.publicKey.toString();
    }

    /**
    * Set the public Key String to cipher to this Key
    * @param  {[String]} str [thre public key in String format]
    */
    ,
    set: function set(str) {
      // ---------- a public key String  ------------------
      var res = void 0;
      if (typeof str !== "string") return this.err("public key not a String !");

      if (!(res = str.match(/^\{([^\}]+)\}(.*)/))) return this.err("public key String not format as {group}key !");
      this.generateconstants(res[1]);
      this.publicKey = new BigInteger(res[2]);
      return true;
    }
  }, {
    key: 'encryptedPrivateKey',
    set: function set(struct) {
      this.encryptedPrivateKeyStruct = struct;
    }
  }, {
    key: 'randomInP',
    get: function get() {
      if (!this.P) return undefined;
      var n = this.P.clone();
      while (n.compareTo(this.P) >= 0) {
        if (this.windowCrypto) {
          n = new BigInteger(this.wCrypto.getRandomValues(new Uint8Array(this.byteLength))).abs();
        } else {
          n = new BigInteger(crypto.randomBytes(this.byteLength)).abs();
        }
      }
      return n;
    }
  }, {
    key: 'quorumMyPublicPartString',
    get: function get() {
      return this.quorumPublicKeyPart.toString();
    }
  }, {
    key: 'quorumMySecretKeyString',
    set: function set(s) {
      this.quorumSecretKey = new BigInteger(s);
    },
    get: function get() {
      return this.quorumSecretKey.toString();
    }
  }]);

  return ElGamal;
}(_Common2.default);